Cell/BE notes:

- future colab P.Barahona:
* new heuristics beyond ffirst (impact, dom/wdeg, lookahead)
* use LS to guide CP (heuristics?)

- data structures:

struct spu_data: includes an AdData (ad) & an int* (value)
in the PPU this is (global) sds[i]
in the SPU this is (global) sd

sds[i].

- PPU

-- runs main
-- main calls Solve() which calls as_init(), which
--- initializes the sds[i] data structure
--- creates and starts a new SPU thread

- SPU

-- each runs main (spu/main)
-- main (spu/main) calls benchmark-specific Solve()

- benchmarks to try
* langford 60, 72, 80...
* partit 8*n (1600)
* magic-square 40..60
* all-interval 50,60,70,80,100
* alpha X
* perfect-square 0..4
* queens


- compilation: DEBUG control flags (1 bit/flag)

1 - report on algorithm stats
2 - report on problem states being passed around (do_not_init=1)
4 - enable DPRINTF(...) macro
8 - low-level SPU init data dump
16 - dump addresses of control and data blocks in SPUs
32 - initialize ad_has_debug global to 1

- benchmarks & databases:

All the benchmark information is collected into an sqlite3 database
with the schema in file PARSE-BENCH.

Data can be imported like this (assuming a tab-separated list of
values)

.separator "	"
.import FILENAME run


we can then do interesting stuff like:

sqlite> select * from speedup natural join latest;

to get the speedups only for the latest runs for each benchmark; eg:

sqlite> select * from speedup natural join latest where flags="" order by bench;


sqlite> select threads, avg(time), min(time), max(time) from run where bench="partit" group by threads;

Which produces the average, min and max times for each number of threads for a given benchmark.

or

sqlite> select threads, (select avg(time) from run where bench="magic-square" and threads=1)/avg(time) from run where bench="magic-square" group by threads;
1	1.0
2	2.14505053122571
4	6.14760490159673
8	11.565141460007
16	19.7677611940299

or, better:
sqlite> select threads, (select avg(time) from run where bench="magic-square" and param=60 and threads=1)/avg(time) from run where bench="magic-square" and param=60 group by threads;
1	1.0
2	2.29167798605451
4	7.23884439359268
8	13.5403959336544
16	23.1961503208066

or even better:
sqlite> select param, threads, (select avg(r.time) from run r where r.bench=bench and r.param=param and r.threads=1)/avg(time) from run where bench="magic-square" group by param, threads;
50	1	1.00836255300312
50	2	1.7913183163297
50	4	4.16363035113035
50	8	7.91676193524784
50	16	13.4747626089664
60	1	0.310951964422348
60	2	0.712601771587101
60	4	2.25093288433534
60	8	4.21041271462619
60	16	7.21288850929089


or, even much better than all of this, the "universal" query :)
sqlite> select bench, param, threads, (select avg(r.time) from run r where r.bench=bench and r.param=param and r.threads=1)/avg(time) from run group by bench, param, threads;
langford	60	1	7.42383147512864
langford	60	2	16.158647563935
langford	60	4	23.9916504988913
langford	60	8	36.0975291909925
langford	60	16	49.4922098341909
langford	72	1	9.92340651152126
langford	72	2	11.2418019480519
langford	72	4	12.9428640849282
langford	72	8	16.125535581222
langford	72	16	26.2308712121212
langford	80	1	3.74014323366747
langford	80	2	6.92716669334186
langford	80	4	9.84888781431334
langford	80	8	17.9663501452885
langford	80	16	15.6136138167388
langford	100	1	1.53396907673223
langford	100	2	2.26128200104493
langford	100	4	4.86357315428699
langford	100	8	5.32786822182556
langford	100	16	9.01404509007601
langford	120	1	0.678384600313479
langford	120	2	1.53967156400633
langford	120	4	2.11995187597962
langford	120	8	3.32316780558968
langford	120	16	3.48969461802056
langford	160	1	0.200833559544607
langford	160	2	0.480067189094458
langford	160	4	0.713571034062056
langford	160	8	1.00539943319744
langford	160	16	1.3745434696308
magic-square	50	1	1.00836255300312
magic-square	50	2	1.7913183163297
magic-square	50	4	4.16363035113035
magic-square	50	8	7.91676193524784
magic-square	50	16	13.4747626089664
magic-square	60	1	0.310951964422348
magic-square	60	2	0.712601771587101
magic-square	60	4	2.25093288433534
magic-square	60	8	4.21041271462619
magic-square	60	16	7.21288850929089
partit	1200	1	1.17521824427066
partit	1200	2	3.16161565433361
partit	1200	4	6.21094030279113
partit	1200	8	14.492194039846
partit	1200	16	22.5480268299036
partit	1600	1	0.693632557394126
partit	1600	2	3.15401257059573
partit	1600	4	3.18722614971096
partit	1600	8	5.86383112044438
partit	1600	16	13.0285784166165
partit	2000	1	0.303399057856975
partit	2000	2	1.04965471036899
partit	2000	4	1.0039884362894
partit	2000	8	4.14608080275888
partit	2000	16	5.03149703557312
perfect-square	0	1	
perfect-square	0	2	
perfect-square	0	4	
perfect-square	0	8	
perfect-square	0	16	
perfect-square	1	1	
queens	200	1	786.926136363636
queens	200	2	786.926136363636
queens	200	4	786.926136363636
queens	200	8	786.926136363636
queens	200	16	393.463068181818
queens	500	1	393.463068181818
queens	500	2	393.463068181818
queens	500	4	393.463068181818
queens	500	8	393.463068181818
queens	500	16	393.463068181818
queens	1000	1	99.6109033371691
queens	1000	2	100.887966200466
queens	1000	4	100.887966200466
queens	1000	8	100.887966200466
queens	1000	16	99.7512003841228
queens	2000	1	27.1353840125392
queens	2000	2	27.2292780748663
queens	2000	4	27.2292780748663
queens	2000	8	27.2292780748663
queens	2000	16	27.2292780748663
queens	4000	1	6.89681101107481
queens	4000	2	6.92107419844886
queens	4000	4	6.95779077244594
queens	4000	8	7.00735651258803
queens	4000	16	7.03869531631159
sqlite> 


now for determining the variance:

CREATE VIEW avg AS
  SELECT bench, param, threads, avg(time) AS time FROM run
  GROUP BY bench, param, threads;

CREATE VIEW min AS
  SELECT bench, param, threads, min(time) AS time FROM run
  GROUP BY bench, param, threads;

CREATE VIEW max AS
  SELECT bench, param, threads, max(time) AS time FROM run
  GROUP BY bench, param, threads;

CREATE VIEW delta AS
  SELECT a.bench AS bench, a.param AS param, a.threads AS threads,
         (r.time-a.time)*(r.time-a.time) AS time
    FROM avg a, run r
    WHERE r.bench=a.bench AND r.param=a.param AND r.threads=a.threads;


## this one gives the variance

CREATE VIEW var AS
  SELECT bench, param, threads, avg(time) AS var
    FROM delta GROUP BY bench, param, threads;

CREATE VIEW stats AS
  SELECT a.*, v.var
    FROM avg a NATURAL JOIN var v;


## this one gives the speedup

CREATE VIEW speedup AS
  SELECT r.bench AS bench, r.param AS param, r.threads AS threads, r.time AS time,
    (SELECT time FROM avg WHERE bench=r.bench
                            AND param=r.param
                            AND threads=1) / r.time AS speedup
    FROM avg r;
